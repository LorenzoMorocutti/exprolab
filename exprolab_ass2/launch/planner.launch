<?xml version="1.0"?>
<launch>

<!-- launch the pddl part-->
<!-- arguments -->
<arg name="domain_path" default="$(find exprolab_ass2)/domain.pddl" />
<arg name="problem_path" default="$(find exprolab_ass2)/problem.pddl" />
<arg name="autom_gen_problem_path" default="$(find exprolab_ass2)/common/new_problem.pddl" />
<arg name="use_problem_topic" default="true" />
<!-- planner will produce output plan and write to this location -->
<arg name="data_path" default="$(find exprolab_ass2)/common/" />  
  <!-- command to run the planner -->
  <arg name="planner_command" default="timeout 10 $(find rosplan_planning_system)/common/bin/popf DOMAIN PROBLEM" />
    <!-- interface to the planning system -->
  <arg name="planner_interface" default="popf_planner_interface" />

  <!-- knowledge base -->
  <node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen">
    <param name="domain_path" value="$(arg domain_path)" />
    <param name="problem_path" value="$(arg problem_path)" />
    <!-- conditional planning flags -->
    <param name="use_unknowns" value="false" />
  </node>


  <!-- problem generation -->
  <include file="$(find rosplan_planning_system)/launch/includes/problem_interface.launch">
    <arg name="knowledge_base"   value="rosplan_knowledge_base" />
    <arg name="domain_path"      value="$(arg domain_path)" />
    <!-- problem_path: pddl problem will be automatically generated and placed in this location -->
    <arg name="problem_path"     value="$(arg autom_gen_problem_path)" />
    <arg name="problem_topic"    value="problem_instance" />
  </include>
  
  
  <!-- planner interface -->
  <include file="$(find rosplan_planning_system)/launch/includes/planner_interface.launch">
    <arg name="use_problem_topic"    value="$(arg use_problem_topic)" />
    <arg name="problem_topic"        value="/rosplan_problem_interface/problem_instance" />
    <arg name="planner_topic"        value="planner_output" />
    <arg name="domain_path"          value="$(arg domain_path)" />
    <arg name="data_path"            value="$(arg data_path)" />
    <arg name="planner_command"      value="$(arg planner_command)" />
    <arg name="planner_interface"    value="$(arg planner_interface)" />
  </include>
  
  <!-- parser-->
  <node name="rosplan_parsing_interface" pkg="rosplan_planning_system" type="pddl_simple_plan_parser" respawn="false" 
output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="planner_topic" value="/rosplan_planner_interface/planner_output" />
<param name="plan_topic" value="complete_plan" />
</node>
<!-- dispatcher-->
<node name="rosplan_plan_dispatcher" pkg="rosplan_planning_system" type="pddl_simple_plan_dispatcher" respawn="false" 
output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="plan_topic" value="/rosplan_parsing_interface/complete_plan" />
<param name="action_dispatch_topic" value="action_dispatch" />
<param name="action_feedback_topic" value="action_feedback" />
</node>

<!-- <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch"> 
<arg name="pddl_action_name" value="move_to"/>
</include> -->
<node name="rosplan_interface_moveto" pkg="exprolab_ass2" type="moveto" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="move_to" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<!-- <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch"> 
<arg name="pddl_action_name" value="move_home"/>
</include> -->
<node name="rosplan_interface_movehome" pkg="exprolab_ass2" type="movehome" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="move_home" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<!-- <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch"> 
<arg name="pddl_action_name" value="move_away_from_home"/>
</include> -->
<node name="rosplan_interface_moveaway" pkg="exprolab_ass2" type="moveaway" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="move_away_from_home" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<!-- <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch"> 
<arg name="pddl_action_name" value="check_hint"/>
</include> -->
<node name="rosplan_interface_checkhint" pkg="exprolab_ass2" type="checkhint" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="check_hint" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<!-- <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch"> 
<arg name="pddl_action_name" value="check_complete_hypotesis"/>
<arg name="action_probability" value="0.7"/>
</include> -->
<node name="rosplan_interface_checkcomplete" pkg="exprolab_ass2" type="checkcomplete" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="check_complete_hypotesis" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>


<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch"> 
<arg name="pddl_action_name" value="check_result"/>
<arg name="action_probability" value="0.7"/>
</include>

<node name="generation_problem" pkg="exprolab_ass2" type="generation_problem.py" respawn="false" output="screen">
</node>

</launch>